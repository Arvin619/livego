// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protocol/grpc/proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackstageManager_GetRoomKey_FullMethodName = "/grpc_api.BackstageManager/GetRoomKey"
)

// BackstageManagerClient is the client API for BackstageManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackstageManagerClient interface {
	GetRoomKey(ctx context.Context, in *GetRoomKeyRequest, opts ...grpc.CallOption) (*GetRoomKeyResponse, error)
}

type backstageManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBackstageManagerClient(cc grpc.ClientConnInterface) BackstageManagerClient {
	return &backstageManagerClient{cc}
}

func (c *backstageManagerClient) GetRoomKey(ctx context.Context, in *GetRoomKeyRequest, opts ...grpc.CallOption) (*GetRoomKeyResponse, error) {
	out := new(GetRoomKeyResponse)
	err := c.cc.Invoke(ctx, BackstageManager_GetRoomKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackstageManagerServer is the server API for BackstageManager service.
// All implementations must embed UnimplementedBackstageManagerServer
// for forward compatibility
type BackstageManagerServer interface {
	GetRoomKey(context.Context, *GetRoomKeyRequest) (*GetRoomKeyResponse, error)
	mustEmbedUnimplementedBackstageManagerServer()
}

// UnimplementedBackstageManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBackstageManagerServer struct {
}

func (UnimplementedBackstageManagerServer) GetRoomKey(context.Context, *GetRoomKeyRequest) (*GetRoomKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomKey not implemented")
}
func (UnimplementedBackstageManagerServer) mustEmbedUnimplementedBackstageManagerServer() {}

// UnsafeBackstageManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackstageManagerServer will
// result in compilation errors.
type UnsafeBackstageManagerServer interface {
	mustEmbedUnimplementedBackstageManagerServer()
}

func RegisterBackstageManagerServer(s grpc.ServiceRegistrar, srv BackstageManagerServer) {
	s.RegisterService(&BackstageManager_ServiceDesc, srv)
}

func _BackstageManager_GetRoomKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackstageManagerServer).GetRoomKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackstageManager_GetRoomKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackstageManagerServer).GetRoomKey(ctx, req.(*GetRoomKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackstageManager_ServiceDesc is the grpc.ServiceDesc for BackstageManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackstageManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_api.BackstageManager",
	HandlerType: (*BackstageManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoomKey",
			Handler:    _BackstageManager_GetRoomKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/grpc/proto/grpc.proto",
}
